{"version":3,"sources":["getWeb3.js","components/Address/Address.jsx","components/utils.js","components/Footer/Footer.jsx","components/Pool/PoolInformations.jsx","components/Transactions/Transactions.jsx","components/StakingOverview.js","components/ContractProperties.js","App.jsx","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","web3","Web3","enable","on","alert","location","reload","console","log","provider","providers","HttpProvider","Address","className","src","width","id","alt","this","props","addrr","React","Component","connectWallet","state","request","method","accounts","connectedWallet","networkVersion","connectedNetwork","code","error","getConnectedNetwork","networkId","getContractProperties","contract","methods","owner","call","contractProperties","_contractOwner","contractAddress","options","address","annualRewardRate","cooldown","minimumReward","poolBalance","getStakersInPool","stakersInPool","stakingToken","totalStake","tokenAddress","getUserTransactions","fromBlock","toBlock","getPastEvents","listStakings","transactionsListing","j","length","returnValues","stakerAddress","toLowerCase","timestamp","Date","timastamp","timestampFormatted","getDate","slice","getMonth","getFullYear","getHours","getMinutes","amountStacked","toFixed","rewards","obj","action","unshift","getUserProperties","getStakedAmount","stakedAmount","stakedAmountUsd","latestPrice","getlastDepositOrClaim","lastClaim","date","formattedDate","getRewards","rewardsToClaim","getFirstTimeDeposit","firstTimeDeposit","dateFirstTimeDeposit","formattedFirstTimeDeposit","getAllTimeHarvest","allTimeHarvest","userProperties","stakingBalance","stakingBalanceUsd","Footer","onClick","navigate","FooterWithNavigate","useNavigate","PoolInformations","informations","Transactions","transactions","map","transaction","index","StakingOverview","stake","chainlinkinstance","valeur","document","getElementById","value","send","from","getLatestPrice","setState","unstake","harvestReward","balance","baseInterest","startDate","newStake","totalRewards","connectedWalletDisplay","substring","type","placeholder","StakingOverviewWithNavigate","ContractProperties","pause","pausedPool","activate","activePool","close","closedPool","unstakeAll","web3ReadOnly","contractReadOnly","extraInterest","interestDecimals","interestDecimalsExp","interestPeriod","maxWeight","isAdmin","currentStep","contractOwnerAddresse","ContractPropertiesWithNavigate","App","componentDidMount","eth","getAccounts","net","getId","deployedNetwork","contractABIJSON","networks","instance","Contract","abi","chainlinkDeployedNetwork","chainlinkABIJSON","events","PoolStatusChange","event","currentStepFromEvent","newStatus","poolStatus","path","element","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.01c98488.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n          window.ethereum.on('disconnect',function(){\n            alert(\"il faut se connecter\");\n          });\n          window.ethereum.on('accountsChanged',function(){\n            window.location.reload();\n          });     \n          window.ethereum.on('chainChanged',function(){\n            window.location.reload();\n          });\n       \n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React from 'react';\nimport './Address.css';\n\n\nexport default class Address extends React.Component {\n\n    render(){\n        return(\n            <div className='container-fluifd header mb-4 sticky-top'>\n\n            <div className='container'>\n                <div className='row'>\n                    <div className='col-6'>\n                        <img src=\"/logo_staking.png\" width=\"50\" id=\"logo\" alt=\"Stakink system logo\" />\n                    </div>\n                    <div className='col-6 px-2 text-right'>\n                        <p className='px-3 pt-3'>Your wallet adresss:<br></br><b>{this.props.addrr}</b></p>\n                    </div>\n                </div>\n                </div>\n            </div>\n        )\n    }\n\n}\n","/**\n     * Connect the Ethereum wallet (e.g. Metamask) to the web application.\n     */\n async function connectWallet(state){\n    try {\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n        state.connectedWallet = await accounts[0];\n        state.connectedNetwork = await window.ethereum.networkVersion;\n        return state\n\n    } catch (error){\n        if (error.code === 4001) {\n            alert('User rejected the request') // User rejected request\n        }\n        console.error(error);\n    }\n}\n\n/**\n * Mapping to translate network ID into a name\n * @param {*} networkId number of the network ID to connect to\n * @returns the name of the network to connect to\n */\nfunction getConnectedNetwork(networkId){\n    if (networkId === '1'){\n        return \"Ethereum Mainnet\";\n    } else if (networkId === \"4\") {\n        return \"Rinkeby Testnet\";\n    } else if (networkId === \"5\") {\n        return \"Goerli Testnet\";\n    } else if (networkId === \"42\") {\n        return \"Kovan Testnet\";\n    } else {\n        return \"Unknown network - probably local\";\n    }\n}\n\n/**\n * Load the smart contract properties and put them into the state under 'contractProperties'\n */\nasync function getContractProperties(state){\n\n    console.log('getContractProperties : state.contract ' + state.contract); \n    state.contractProperties._contractOwner = await state.contract.methods.owner().call();\n\n    state.contractAddress = state.contract.options.address;\n\n    console.log('getContractProperties : contractAddress ' + state.contractAddress);\n\n    console.log('getContractProperties : state.contractProperties._contractOwner ' + state.contractProperties._contractOwner); \n\n    let annualRewardRate = await  state.contract.methods.annualRewardRate().call();\n    console.log('getContractProperties : annualRewardRate ' + annualRewardRate);\n\n    let cooldown = await state.contract.methods.cooldown().call();\n    console.log('getContractProperties : cooldown ' + cooldown);\n\n    let minimumReward = await  state.contract.methods.minimumReward().call();\n    console.log('getContractProperties : minimumReward ' + minimumReward);\n\n    let poolBalance = await  state.contract.methods.poolBalance().call();\n    poolBalance = poolBalance / 1000000000000000000;\n    console.log('getContractProperties : poolBalance ' + poolBalance);\n    \n    let stakersInPool = await  state.contract.methods.getStakersInPool().call();\n    console.log('getContractProperties : stakersInPool ' + stakersInPool);\n\n    let stakingToken = await  state.contract.methods.stakingToken().call();\n    console.log('getContractProperties : stakingToken ' + stakingToken);\n    \n    state.contractProperties.annualRewardRate = annualRewardRate;\n    state.contractProperties.cooldown = cooldown;\n    state.contractProperties.minimumReward = minimumReward;\n    state.contractProperties.totalStake = poolBalance;\n    state.contractProperties.stakersInPool = stakersInPool;\n    state.contractProperties.tokenAddress = stakingToken;\n   \n    return state\n}\n\n\n/**\n * Liste des transactions de l'utilisateur\n * \n * @param {*} state \n * @returns \n */\nasync function getUserTransactions(state) {\n\n    let options = {\n        fromBlock: 0,\n        toBlock: 'latest'\n      };\n\n    // Recherche de la liste des transactions\n    let listStakings = await state.contract.getPastEvents('Transaction', options);   \n  \n    // Construction du tableau des transactions\n    let transactionsListing = [];\n    for(let j=0; j < listStakings.length; j++){\n\n        if ( listStakings[j].returnValues.stakerAddress.toLowerCase() === state.connectedWallet.toLowerCase() ) {\n            \n            var timestamp = new Date(listStakings[j].returnValues.timastamp * 1000);\n            var timestampFormatted = ('0' + timestamp.getDate()).slice(-2) + '/' + ('0' + (timestamp.getMonth() + 1)).slice(-2) + '/' + timestamp.getFullYear() + ' ' + ('0' + timestamp.getHours()).slice(-2) + ':' + ('0' + timestamp.getMinutes()).slice(-2);\n          \n            var amountStacked = listStakings[j].returnValues.amountStacked;\n            amountStacked = amountStacked / 1000000000000000000;\n            amountStacked = amountStacked.toFixed(6) + ' Eth';\n            if ( listStakings[j].returnValues.amountStacked == 0 ) {\n                amountStacked = '';\n            }\n\n            var rewards = listStakings[j].returnValues.rewards;\n            rewards = rewards / 1000000000000000000;\n            rewards = rewards.toFixed(12) + ' Dev';\n            if ( listStakings[j].returnValues.rewards == 0 ) {\n                rewards = '';\n            }\n\n            var obj = {\n                action: listStakings[j].returnValues.action,\n                amountStacked: amountStacked,\n                rewards: rewards,\n                timestamp: listStakings[j].returnValues.timastamp,\n                timestampFormatted: timestampFormatted\n            };\n\n            transactionsListing.unshift(obj);\n        } \n    }\n    state.transactionsListing = transactionsListing;\n    return state;\n}\n\n/**\n * Update des information du staking de l'utilisateur\n * \n * @param {*} state \n * @returns \n */\nasync function getUserProperties(state){\n\n    let stakedAmount = await state.contract.methods.getStakedAmount(state.connectedWallet).call();\n    stakedAmount = stakedAmount / 1000000000000000000;\n  \n    let stakedAmountUsd = stakedAmount * state.latestPrice;\n    stakedAmountUsd = stakedAmountUsd.toFixed(2);\n\n    let lastClaim = await state.contract.methods.getlastDepositOrClaim(state.connectedWallet).call();\n    var date = new Date(lastClaim * 1000);\n    var formattedDate = ('0' + date.getDate()).slice(-2) + '/' + ('0' + (date.getMonth() + 1)).slice(-2) + '/' + date.getFullYear() + ' ' + ('0' + date.getHours()).slice(-2) + ':' + ('0' + date.getMinutes()).slice(-2);\n  \n    let rewardsToClaim = await state.contract.methods.getRewards(state.connectedWallet).call();\n    rewardsToClaim = rewardsToClaim / 1000000000000000000;\n    rewardsToClaim = rewardsToClaim.toFixed(12);\n   \n    let firstTimeDeposit = await state.contract.methods.getFirstTimeDeposit(state.connectedWallet).call();\n    var dateFirstTimeDeposit = new Date(firstTimeDeposit * 1000);\n    var formattedFirstTimeDeposit = ('0' + dateFirstTimeDeposit.getDate()).slice(-2) + '/' + ('0' + (dateFirstTimeDeposit.getMonth() + 1)).slice(-2) + '/' + dateFirstTimeDeposit.getFullYear() + ' ' + ('0' + dateFirstTimeDeposit.getHours()).slice(-2) + ':' + ('0' + dateFirstTimeDeposit.getMinutes()).slice(-2);\n  \n    let allTimeHarvest = await state.contract.methods.getAllTimeHarvest(state.connectedWallet).call();\n    allTimeHarvest = allTimeHarvest / 1000000000000000000;\n    allTimeHarvest = allTimeHarvest.toFixed(12);\n  \n    state.userProperties.stakingBalance = stakedAmount;\n    state.userProperties.stakingBalanceUsd = stakedAmountUsd;\n    state.userProperties.lastClaim = formattedDate;\n    state.userProperties.rewardsToClaim = rewardsToClaim;\n    state.userProperties.firstTimeDeposit = formattedFirstTimeDeposit;\n    state.userProperties.allTimeHarvest = allTimeHarvest;\n    \n    return state\n}\n\nexport {connectWallet, getConnectedNetwork, getContractProperties, getUserTransactions, getUserProperties }","import React, {Component}  from 'react'\nimport {useNavigate} from 'react-router-dom'\nimport './Footer.css';\nimport {getConnectedNetwork} from '../utils'\n\nclass Footer extends Component {\n\n    render(){\n        return(\n            <div className='footer mt-4 fixed-bottom'>\n                <div className='container'>\n                    <div className='row'>\n                        <div className='col-9'>\n                            <ul>           \n                                <li>Address of Staking contract is: '{this.props.state.contractAddress}' on network {getConnectedNetwork(this.props.state.connectedNetwork)}.</li>\n                                <li>Address of the staking token is: '{this.props.state.contractProperties.tokenAddress}' on network {getConnectedNetwork(this.props.state.connectedNetwork)}</li>\n                                <li>Address of the contract owner is: '{ this.props.state.contractProperties._contractOwner}'.</li>\n                            </ul>\n                        </div>\n                        <div className='col-3 text-end'>\n                          <button  className='btn btn-secondary btn-action m-2' onClick={() => this.props.navigate('/contract')}>Administration</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n}\n\n\nfunction FooterWithNavigate(props) {\n    let navigate = useNavigate();\n    return <Footer {...props} navigate={navigate} />\n}\n\nexport default FooterWithNavigate;\n","import React from 'react';\n\nexport default class PoolInformations extends React.Component {\n\n    render(){\n        \n        let informations = this.props.informations;\n\n        return(\n            <div className='row'>\n                    <div className='col-12'>\n                        <h2 className=\"top-card-title\">Pool information</h2>\n                        <div className=\"card\">\n                            <div className=\"card-body\">\n                                <div className='row'>\n                                    <div className='col-4'>\n                                        <h3>Total amount stacked</h3>\n                                        <p><span className=\"amount\">{informations.totalStake}</span><span className=\"currency\"> Eth</span></p>\n                                    </div>\n                                    <div className='col'>\n                                        <h3>Stakers in pool</h3>\n                                       <p><span className=\"amount\">{informations.stakersInPool}</span><span className=\"currency\"> Stackers</span></p> \n                                    </div>\n                                    <div className='col'>\n                                        <h3>Annual reward rate</h3>\n                                       <p><span className=\"amount\">{informations.annualRewardRate}%</span></p> \n                                    </div>\n                                    <div className='col'>\n                                        <h3>Cooldown period</h3>\n                                       <p><span className=\"amount\">{informations.cooldown}</span><span className=\"currency\">s</span></p> \n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                \n        )\n    }\n\n}\n","import React from 'react';\n\nexport default class Transactions extends React.Component {\n\n    render(){\n        return(\n            <div className='row'>\n                <div className='col-12'>\n                    <h2 className=\"top-card-title\">Your transactions</h2>\n\n                    <div className=\"card\">\n                        <div className=\"card-body\">\n                            <div className='row'>\n                                <div className='col-12'>\n                                    <table className=\"table\">\n                                        <thead>\n                                            <tr>\n                                                <th>Date</th>\n                                                <th>Action</th>\n                                                <th className=\"text-end\">Amount Stacked</th>\n                                                <th className=\"text-end\">Rewards</th>\n                                            </tr>\n                                        </thead>\n                                        <tbody>\n                                            {this.props.transactions.map((transaction, index) => (\n                                            <tr key={index}>\n                                                <td>{transaction.timestampFormatted}</td>\n                                                <td>{transaction.action}</td>\n                                                <td className=\"text-end\">{transaction.amountStacked}</td>\n                                                <td className=\"text-end\">{transaction.rewards}</td>\n                                            </tr>\n                                            ))}\n                                        </tbody>\n                                    </table>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n                \n        )\n    }\n\n}\n","import React, {Component}  from 'react'\nimport {useNavigate} from 'react-router-dom'\nimport Address from './Address/Address'\nimport FooterWithNavigate from './Footer/Footer'\nimport PoolInformations from './Pool/PoolInformations'\nimport Transactions from './Transactions/Transactions'\n\nimport {connectWallet, getContractProperties, getUserProperties, getUserTransactions } from './utils'\n\n/**\n * Component to get an overview of the staking contract state\n */\nclass StakingOverview extends Component{\n    \n    /**\n     * Sets the initial state\n     * @param {*} props Should contain the contract ABI, address and web provider \n     */\n    constructor(props){\n        super(props)\n        this.state = {\n            connectedWallet: null,\n            connectedNetwork: null,\n            contract: null,\n            contractAddress: null,\n            latestPrice: 0,\n            contractProperties: {\n                balance: 0,\n                _contractOwner: 0,\n                baseInterest: 0,\n                cooldown: 0,\n                totalStake: 0,\n                minimumReward: 0,\n                annualRewardRate: 0,\n                stakersInPool: 0\n            },\n            userProperties: {\n                stakingBalance: 0,\n                stakingBalanceUsd: 0,\n                startDate: 0,\n                newStake: 0,\n                rewardsToClaim: 0,\n                totalRewards: 0,\n                firstTimeDeposit: 0,\n                allTimeHarvest: 0\n            },\n            transactionsListing: []\n        }\n    }\n    \n    async componentDidMount() {\n    \n        const { contract, accounts, chainlinkinstance } = this.props.state;\n\n        // Update ETH/USD\n        let latestPrice = await chainlinkinstance.methods.getLatestPrice().call();\n        latestPrice = latestPrice / 100000000;\n      \n        let state = this.state\n        state.contract = contract;\n        state.latestPrice = latestPrice;\n        state.connectedWallet = accounts[0];\n\n        state.connectedWalletDisplay = state.connectedWallet.substring(1,12) + \"...\" + state.connectedWallet.substring(32);\n\n        state = await connectWallet(state);\n        state = await getContractProperties(state);\n        state = await getUserTransactions(state);\n        state = await getUserProperties(state);\n        this.setState(state);\n    }\n\n    // Staking d'Eth\n    stake = async () => {\n    \n        const { contract, accounts, chainlinkinstance  } = this.props.state;\n\n        let valeur = document.getElementById(\"newStake\").value;\n        valeur = 1000000000000000000 * valeur;\n        await contract.methods.stake().send({from: accounts[0], value: valeur});\n\n        // On vide le champs de saisie\n        document.getElementById(\"newStake\").value = ''; \n        \n        // Update ETH/USD\n        let latestPrice = await chainlinkinstance.methods.getLatestPrice().call();\n        latestPrice = latestPrice / 100000000;\n\n        let state = this.state\n        state.latestPrice = latestPrice;\n        state = await getUserTransactions(state);\n        state = await getUserProperties(state);\n        state = await getContractProperties(state);\n        this.setState(state);\n    }\n\n    // Unstaking d'Eth\n    unstake = async () => {\n\n        const { contract, accounts, chainlinkinstance } = this.props.state;\n\n        await contract.methods.unstake().send({from: accounts[0]});\n\n        // Update ETH/USD\n        let latestPrice = await chainlinkinstance.methods.getLatestPrice().call();\n        latestPrice = latestPrice / 100000000;\n\n        let state = this.state\n        state.latestPrice = latestPrice;\n        state = await getUserTransactions(state);\n        state = await getUserProperties(state);\n        state = await getContractProperties(state);\n        this.setState(state);\n    }\n\n    // Unstaking d'Eth\n    harvestReward = async () => {\n    \n        const { contract, accounts, chainlinkinstance } = this.props.state;\n\n        await contract.methods.harvestReward().send({from: accounts[0]});\n\n        // Update ETH/USD\n        let latestPrice = await chainlinkinstance.methods.getLatestPrice().call();\n        latestPrice = latestPrice / 100000000;\n\n        let state = this.state\n        state.latestPrice = latestPrice;\n        state = await getUserTransactions(state);\n        state = await getUserProperties(state);\n        state = await getContractProperties(state);\n        this.setState(state);\n    }  \n\n    render() {\n        let state = this.state\n        return (\n            <div>\n                <Address addrr={state.connectedWalletDisplay} /> \n                <div className='container'>\n\n                    <div className='row'>\n\n                        <div className='col-12 mt-5 mb-4'>\n                            <p className=\"text-center\">\n                                <input type=\"text\" id=\"newStake\" className=\"col-6\" placeholder=\"Amount to stake\" /><button id=\"stakeButton\" className='btn btn-secondary' onClick={this.stake}>Stake</button>\n                            </p>\n                        </div>\n                    </div>\n\n                    <div className='row'>\n                        <div className='col-12'>\n                            <h2 className=\"top-card-title\">Your staking</h2>\n                            <div className=\"card\">\n                                <div className=\"card-body\">\n                                    <div className='row'>\n                                        <div className='col-3'>\n                                            <h3>Total amount stacked</h3>\n                                            <p className=\"amount\"><span className=\"amount\">{state.userProperties.stakingBalance}</span><span className=\"currency\"> Eth</span></p>\n                                            <p>{state.userProperties.stakingBalanceUsd } USD</p>\n                                        </div>\n\n                                        <div className='col'>\n                                            <h3>Rewards to be claimed</h3>\n                                            <p className=\"amount\"><span className=\"amount\">{state.userProperties.rewardsToClaim}</span><span className=\"currency\"> Dev</span></p>\n                                        </div>\n                                        <div className='col'>\n                                            <h3>All time harvest</h3>\n                                            <p className=\"amount\"><span className=\"amount\">{state.userProperties.allTimeHarvest}</span><span className=\"currency\"> Dev</span></p>\n                                        </div>\n                                    </div>\n\n                                    <div className='row mt-4'>\n                                        <div className='col-6'>\n                                            <p>Date of first deposit: {state.userProperties.firstTimeDeposit } </p>\n                                        </div>\n                                        <div className='col-6 text-end'>\n                                            <button id=\"harvestRewardButton\" className='btn btn-secondary btn-action m-2' onClick={this.harvestReward}>harvest Reward</button>\n                                            <button id=\"unstakeButton\" className='btn btn-secondary btn-action m-2' onClick={this.unstake}>Unstake</button>\n                                        </div>\n                                    </div>\n\n                                </div>\n                            </div>\n                        </div>\n                        \n                    </div>\n\n                    <PoolInformations informations={state.contractProperties} />\n                    <Transactions transactions={this.state.transactionsListing} />\n                </div>\n\n                <FooterWithNavigate state={state} /> \n            </div>\n        )\n    }\n    \n\n}\n\nfunction StakingOverviewWithNavigate(props) {\n    let navigate = useNavigate();\n    return <StakingOverview {...props} navigate={navigate} />\n}\n\nexport default StakingOverviewWithNavigate\n","import React, {Component}  from 'react'\nimport {useNavigate} from 'react-router-dom'\nimport Address from './Address/Address'\n\n/**\n * Component to update stake properties in the contract\n */\nclass ContractProperties extends Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            connectedWallet: null,\n            connectedNetwork: null,\n            web3: null,\n            contract: null,\n            web3ReadOnly: null,\n            contractReadOnly: null,\n            contractProperties: {\n                balance: 0,\n                _contractOwner: 0,\n                baseInterest: 0,\n                extraInterest: 0,\n                interestDecimals: 0,\n                interestDecimalsExp: 0,\n                interestPeriod: 0,\n                cooldown: 0,\n                totalStake: 0,\n                maxWeight: 0\n            }\n        }\n\n    }\n    \n    // Mise en pause de la Pool\n    pause = async () => {\n        const { contract, accounts } = this.props.state;\n        await contract.methods.pausedPool().send({from: accounts[0]});\n    }\n\n    // Activation de la Pool\n    activate = async () => {\n        const { contract, accounts } = this.props.state;\n        await contract.methods.activePool().send({from: accounts[0]});\n    }\n\n    // Close de la Pool\n    close = async () => {\n        const { contract, accounts } = this.props.state;\n        await contract.methods.closedPool().send({from: accounts[0]});\n    }\n\n    // Unstake complet de la Pool\n    unstakeAll = async () => {\n        const { contract, accounts } = this.props.state;\n        await contract.methods.unstakeAll().send({from: accounts[0]});\n    }\n\n\n    render(){\n        let state = this.props.state;\n\n        if (state.isAdmin === true) {\n\n            if( state.currentStep === '0' ){\n                return(\n           \n                    <div className='container'>\n                        <div className='row'>\n                            <div className='col'>\n                                <Address addrr={state.accounts} />\n                                <button className='btn btn-secondary btn-action m-2' onClick={() => this.props.navigate('/')}>Back to overview</button>\n                                <h1>Pool is Active</h1>\n                            </div>\n                        </div>\n                        <div className='row mt-4'>\n                            <div className='col-12 text-end'>\n                                <button id=\"pauseButton\" className='btn btn-secondary btn-action m-2' onClick={this.pause}>Pause</button>\n                                <button id=\"closeButton\" className='btn btn-secondary btn-action m-2' onClick={this.close}>Close</button>\n                            </div>\n                        </div>\n                    </div>\n                )  \n            }\n\n            if( state.currentStep === '1' ){\n            \n                return(\n            \n                    <div className='container'>\n                        <div className='row'>\n                            <div className='col'>\n                                <Address addrr={state.accounts} />\n                                <button className='btn btn-secondary btn-action m-2' onClick={() => this.props.navigate('/')}>Back to overview</button>\n                                <h1>\n                                        Pool is Paused\n                                        {state.currentStep}\n                                    </h1>\n                                <div className='Title'>\n                                    Update global parameters\n                                    {state.currentStep}\n                                </div>\n                                <div>\n                                Update the global parameters as contract owner. The address of the contract owner able to update the contract state is: '{state.contractOwnerAddresse}'.\n                                </div>\n        \n                            </div>\n                        </div>\n\n                        <div className='row mt-4'>\n                                <div className='col-12 text-end'>\n                                    <button id=\"pauseButton\" className='btn btn-secondary btn-action m-2' onClick={this.activate}>Active</button>\n                                    <button id=\"closeButton\" className='btn btn-secondary btn-action m-2' onClick={this.close}>Close</button>\n                                </div>\n                            </div>\n                    </div>\n                )    \n            }   \n            \n            \n            if( state.currentStep === '2' ){\n            \n                return(\n            \n                    <div className='container'>\n                        <div className='row'>\n                            <div className='col-12'>\n                                <Address addrr={state.accounts} />\n                                <button  className='btn btn-secondary btn-action m-2' onClick={() => this.props.navigate('/')}>Back to overview</button>\n                                <h1>Pool is Closed</h1>\n                                <div>\n                                Update the global parameters as contract owner. The address of the contract owner able to update the contract state is: '{state.contractOwnerAddresse}'.\n                                </div>\n                            </div>\n                        </div>\n\n                        <div className='row mt-4'>\n                            <div className='col-12 text-end'>\n                                <button id=\"pauseButton\" className='btn btn-secondary btn-action m-2' onClick={this.unstakeAll}>Unstake All</button>\n                                <button id=\"pauseButton\" className='btn btn-secondary btn-action m-2' onClick={this.activate}>Active</button>\n                                <button id=\"pauseButton\" className='btn btn-secondary btn-action m-2' onClick={this.pause}>Pause</button>\n                            </div>\n                        </div>\n                    </div>\n                )    \n            }   \n\n        } else {\n            return (                 \n                \n                <div className='container'>\n                    <div className='row'>\n                        <div className='col-12'>\n\n                        <Address addrr={state.accounts} />\n                            You are not connected with the owner address! Change to the owner address in your wallet to use this page\n                        </div>\n                    </div>\n                </div>\n            )\n        }\n    }\n        \n}\n\nfunction ContractPropertiesWithNavigate(props) {\n    let navigate = useNavigate();\n    return <ContractProperties {...props} navigate={navigate} />\n}\n\nexport default ContractPropertiesWithNavigate\n","import React, { Component } from \"react\";\nimport getWeb3 from \"./getWeb3\";\n\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route\n} from 'react-router-dom'\n\nimport \"./App.css\";\n\n// The ABI (Application Binary Interface) is the interface of the smart contract\nimport contractABIJSON from './contracts/Staking.json';\nimport chainlinkABIJSON from './contracts/Chainlink.json';\n\nimport StakingOverviewWithNavigate from './components/StakingOverview';\nimport ContractPropertiesWithNavigate from './components/ContractProperties';\n\nclass App extends Component {\n\n  state = { web3: null, contract: null, isAdmin: false, accounts: null, contractOwnerAddresse: null, chainlinkinstance: null, currentStep: 0};\n\n  componentDidMount = async () => {\n      try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = contractABIJSON.networks[networkId];\n      const instance = new web3.eth.Contract(\n        contractABIJSON.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      const chainlinkDeployedNetwork = chainlinkABIJSON.networks[networkId];\n      const chainlinkinstance = new web3.eth.Contract(\n        chainlinkABIJSON.abi,\n        chainlinkDeployedNetwork && chainlinkDeployedNetwork.address,\n      );\n\n      let options = {\n        fromBlock: 'latest',\n        toBlock: 'latest'\n      };\n\n      // Subscribe à l'event WorkflowStatusChange pour adapter l'affichage\n      instance.events.PoolStatusChange(options)\n        .on('data', event => {\n          console.log('PoolStatusChange');\n          let currentStepFromEvent = event.returnValues.newStatus;\n\n          console.log('PoolStatusChange ' + currentStepFromEvent);\n          this.setState({currentStep:currentStepFromEvent});\n        }\n      );\n\n      // Recherche du WorkflowStatus\n      let currentStep = await instance.methods.poolStatus().call();\n\n      // Récupération de l'adresse du propriétaire du contrat\n      let contractOwnerAddresse = await instance.methods.owner().call();\n\n      // Vérification si l'on est admin\n      let isAdmin = false;\n      if ( contractOwnerAddresse.toLowerCase() === accounts[0].toLowerCase() ) {\n        isAdmin = true;\n        console.log('isAdmin');\n      }\n           console.log('contractOwnerAddresse ' + contractOwnerAddresse.toLowerCase());\n           console.log('accounts[0] ' + accounts[0].toLowerCase());\n      // Update des informations du state\n      this.setState({ web3, contract: instance, isAdmin, accounts, contractOwnerAddresse, chainlinkinstance, currentStep});\n\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    \n    return (\n      <Router>\n        <Routes>\n          <Route path='/' element = { <StakingOverviewWithNavigate state={this.state} />}/>\n          <Route path='/contract' element = { <ContractPropertiesWithNavigate state={this.state} />} />\n        </Routes>\n      </Router>\n    )\n\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}